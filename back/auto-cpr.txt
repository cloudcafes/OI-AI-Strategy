//@version=5
indicator("Auto CPR & Pivot Levels", overlay=true)

// Option to use manual input or auto-fetch
use_manual_input = input.bool(false, "Use Manual Input", tooltip="Enable to manually input yesterday's OHLC values")

// Manual input for yesterday's OHLC data (only used if use_manual_input is true)
manual_open = input.float(24563.35, "Yesterday Open", tooltip="Manual yesterday open price")
manual_high = input.float(24702.60, "Yesterday High", tooltip="Manual yesterday high price")
manual_low = input.float(24465.65, "Yesterday Low", tooltip="Manual yesterday low price")
manual_close = input.float(24487.40, "Yesterday Close", tooltip="Manual yesterday close price")

// Function to get previous day's OHLC
get_previous_day_ohlc() =>
    // Request previous day's data using daily timeframe
    prev_open = request.security(syminfo.tickerid, "1D", open[1], lookahead=barmerge.lookahead_off)
    prev_high = request.security(syminfo.tickerid, "1D", high[1], lookahead=barmerge.lookahead_off)
    prev_low = request.security(syminfo.tickerid, "1D", low[1], lookahead=barmerge.lookahead_off)
    prev_close = request.security(syminfo.tickerid, "1D", close[1], lookahead=barmerge.lookahead_off)
    [prev_open, prev_high, prev_low, prev_close]

// Get OHLC values based on user preference
[auto_open, auto_high, auto_low, auto_close] = get_previous_day_ohlc()

y_open = use_manual_input ? manual_open : auto_open
y_high = use_manual_input ? manual_high : auto_high
y_low = use_manual_input ? manual_low : auto_low
y_close = use_manual_input ? manual_close : auto_close

// Calculate Pivot Point
pivot = (y_high + y_low + y_close) / 3

// Calculate Central Pivot Range (CPR)
bc = (y_high + y_low) / 2
tc = (pivot - bc) + pivot
cpr_width = tc - bc

// Calculate Support and Resistance Levels
r3 = y_high + 2 * (pivot - y_low)
r2 = pivot + (y_high - y_low)
r1 = (2 * pivot) - y_low

s1 = (2 * pivot) - y_high
s2 = pivot - (y_high - y_low)
s3 = y_low - 2 * (y_high - pivot)

// Detect new day only on intraday timeframes
new_day = timeframe.isintraday ? ta.change(time("D")) : false

// Use session-based plotting to limit lines to the current day
var float day_tc = na
var float day_bc = na
var float day_r3 = na
var float day_r2 = na
var float day_r1 = na
var float day_pivot = na
var float day_s1 = na
var float day_s2 = na
var float day_s3 = na

if new_day
    day_tc := na
    day_bc := na
    day_r3 := na
    day_r2 := na
    day_r1 := na
    day_pivot := na
    day_s1 := na
    day_s2 := na
    day_s3 := na
else if na(day_tc)
    day_tc := tc
    day_bc := bc
    day_r3 := r3
    day_r2 := r2
    day_r1 := r1
    day_pivot := pivot
    day_s1 := s1
    day_s2 := s2
    day_s3 := s3

// Plot only for the current day's session
plot(day_tc, "TC (Top Central)", color=color.blue, linewidth=2, style=plot.style_line)
plot(day_bc, "BC (Bottom Central)", color=color.blue, linewidth=2, style=plot.style_line)
fill(plot(day_tc), plot(day_bc), color=color.new(color.blue, 90), title="CPR Area")

plot(day_s1, "S1", color=color.red, linewidth=2, style=plot.style_line)
plot(day_s2, "S2", color=color.red, linewidth=2, style=plot.style_line)
plot(day_s3, "S3", color=color.red, linewidth=2, style=plot.style_line)

plot(day_r1, "R1", color=color.green, linewidth=2, style=plot.style_line)
plot(day_r2, "R2", color=color.green, linewidth=2, style=plot.style_line)
plot(day_r3, "R3", color=color.green, linewidth=2, style=plot.style_line)

plot(day_pivot, "Pivot", color=color.orange, linewidth=2, style=plot.style_line)

// Display values on chart
var table pivotTable = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)

if barstate.islast
    table.cell(pivotTable, 0, 0, "Level", bgcolor=color.gray, text_color=color.white)
    table.cell(pivotTable, 1, 0, "Value", bgcolor=color.gray, text_color=color.white)
    
    table.cell(pivotTable, 0, 1, "R3", bgcolor=color.lime)
    table.cell(pivotTable, 1, 1, str.tostring(r3, "#.##"), bgcolor=color.lime)
    
    table.cell(pivotTable, 0, 2, "R2", bgcolor=color.lime)
    table.cell(pivotTable, 1, 2, str.tostring(r2, "#.##"), bgcolor=color.lime)
    
    table.cell(pivotTable, 0, 3, "R1", bgcolor=color.lime)
    table.cell(pivotTable, 1, 3, str.tostring(r1, "#.##"), bgcolor=color.lime)
    
    table.cell(pivotTable, 0, 4, "Pivot", bgcolor=color.orange)
    table.cell(pivotTable, 1, 4, str.tostring(pivot, "#.##"), bgcolor=color.orange)
    
    table.cell(pivotTable, 0, 5, "S1", bgcolor=color.red)
    table.cell(pivotTable, 1, 5, str.tostring(s1, "#.##"), bgcolor=color.red)
    
    table.cell(pivotTable, 0, 6, "S2", bgcolor=color.red)
    table.cell(pivotTable, 1, 6, str.tostring(s2, "#.##"), bgcolor=color.red)
    
    table.cell(pivotTable, 0, 7, "S3", bgcolor=color.red)
    table.cell(pivotTable, 1, 7, str.tostring(s3, "#.##"), bgcolor=color.red)
    
    table.cell(pivotTable, 0, 8, "TC", bgcolor=color.blue)
    table.cell(pivotTable, 1, 8, str.tostring(tc, "#.##"), bgcolor=color.blue)
    
    table.cell(pivotTable, 0, 9, "BC", bgcolor=color.blue)
    table.cell(pivotTable, 1, 9, str.tostring(bc, "#.##"), bgcolor=color.blue)

// Alert conditions
alertcondition(ta.crossover(close, r1), "Price crosses above R1", "Price crossed above R1")
alertcondition(ta.crossunder(close, s1), "Price crosses below S1", "Price crossed below S1")

// Display CPR width info
var label cprLabel = label.new(na, na, "", style=label.style_label_left, color=color.blue, textcolor=color.white)
if barstate.islast
    label.set_xy(cprLabel, bar_index, high)
    label.set_text(cprLabel, "CPR Width: " + str.tostring(cpr_width, "#.##") + " points")